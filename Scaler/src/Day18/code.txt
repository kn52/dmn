Q1. Max Sum Contiguous Subarray
class Solution {
    public int maxSubArray(List<int> A) {
        int sum = 0;
        int ans = int.MinValue;
        for (int i = 0; i < A.Count; i++) {
            sum += A[i];
            if (sum > ans) {
                ans = sum;
            }
            if (sum < 0) {
                sum = 0;
            }
        }
        return ans;
    }
}

Q2. Continuous Sum Query
class Solution {
    public List<int> solve(int A, List<List<int>> B) {
        int N = B.Count;
        List<int> _array = new int[A].ToList();
        for (int i = 0; i < N; i++) {
            _array[B[i][0] - 1] += B[i][2];
            if (B[i][1] - 1 < A - 1) {
                _array[B[i][1]] -= B[i][2];
            }
        }
        for (int j = 1; j < A; j++) {
            _array[j] += _array[j - 1]; 
        }
        return _array; 
    }
}


Q3. Rain Water Trapped
class Solution {
    public int trap(List<int> A) {
        int N = A.Count;
        List<int> lmax = new int[N].ToList();
        List<int> rmax = new int[N].ToList();
        int ans = 0;
        int max = A[0];
        for (int i = 0; i < N; i++) {
            max = Math.Max(A[i], max);
            lmax[i] = Math.Max(A[i], max);
        }
        max = A[N - 1];
        for (int i = N - 1; i > -1; i--) {
            max = Math.Max(A[i], max);
            rmax[i] = Math.Max(A[i], max);
        }
        for (int i = N - 1; i > -1; i--) {
            int water = Math.Min(lmax[i],rmax[i]) - A[i];
            if (water > 0)  {
                ans += water;
            }
        }
        return ans;
    }
}


Q1. Add One To Number
class Solution {
    public List<int> plusOne(List<int> A) {
        int N = A.Count;
        int carry = 0;
        for (int i = N - 1; i > -1; i--)
        {
            int sum = i == (N - 1) ? (carry + A[i] + 1) : (carry + A[i]);
            carry = sum / 10;
            A[i] = sum % 10;
            if (i == 0 && carry == 1)
            {
                A.Insert(0, carry);
                carry = 0;
                break;
            }
            if (sum < 10)
            {
                break;
            }
        }
        int k = 0;
        while (k < A.Count)
        {
            if (A[k] == 0)
            {
                A.Remove(k);
            }
            else
            {
                break;
            }
        }
        return A; 
    }
}


Q2. Flip
public class Solution {
    public ArrayList<Integer> flip(String A) {
         int ans = 0;
        int sum = 0;
        int start = 0;
        int end = 0;
        ArrayList<Integer> a = new ArrayList<>();
        a.add(0);
        a.add(0);
        for(int i = 0; i < A.length(); i++){
            if(A.charAt(i)=='1'){
                sum+=1;
            }else if(A.charAt(i)=='0'){
                sum = sum - 1;
            }
            if(sum<ans){
                ans = sum;
                end = i+1;
                a.set(0,start+1);
                a.set(1,end);
            }
            if(sum>0){
                sum = 0;
                start = i+1;
            }
        }
        if(a.get(0)==0&&a.get(1)==0){
            return new ArrayList<Integer>();
        }
        return a;
    
    }
}
