Q1. Rotated Sorted Array Search
public class Solution {
    public int search(final int[] A, int B) {
        return searchInRotatedSortedArray(A, 0, A.length-1, B);
    }
    static int searchInRotatedSortedArray(int[] A, int s, int e, int B) {
        if(s > e) {
            return -1;
        }

        int m = (e+s)/2;
        if(A[m] == B) {
            return m;
        }
        else if(A[m] >= A[s]) {
            if(A[s] <= B && A[m] >= B) {
                return searchInRotatedSortedArray(A, s, m-1, B);
            }
            else {
                return searchInRotatedSortedArray(A, m+1, e, B);
            }
        }
        else {
            if(A[m] <= B && B <= A[e]) {
                return searchInRotatedSortedArray(A, m+1, e, B);
            }
            else {
                return searchInRotatedSortedArray(A, s, m-1, B);
            }
        }
    }
}


Q2. Median of Array
public class Solution {
	// DO NOT MODIFY BOTH THE LISTS
	public double findMedianSortedArrays(final List<Integer> a, final List<Integer> b) {
        int m = a.size();
        int n = b.size();
        if (m > n) {
            return findMedianSortedArrays(b, a);
        }
        int partition = (m + n + 1) / 2;
        int low = 0, high = m;
        while (low <= high) {
            int cut1 = (low + high) / 2;
            int cut2 = partition - cut1;
            int l1 = (cut1 == 0) ? Integer.MIN_VALUE : a.get(cut1 - 1);
            int r1 = (cut1 == m) ? Integer.MAX_VALUE : a.get(cut1);
            int l2 = (cut2 == 0) ? Integer.MIN_VALUE : b.get(cut2 - 1);
            int r2 = (cut2 == n) ? Integer.MAX_VALUE : b.get(cut2);
            if (l1 <= r2 && l2 <= r1) {
                int total = m + n;
                int maxLeft = Math.max(l1, l2);
                int minRight = Math.min(r1, r2);
                if (total % 2 == 0)
                    return (double)(0.5 * (maxLeft + minRight));
                return maxLeft;
            } else if (l1 > r2) {
                high = cut1 - 1;
            } else {
                low = cut1 + 1;
            }
        }
        return (double) 0.0;
	}
}


Q3. Ath Magical Number
public class Solution {
    public int solve(int A, int B, int C) {
         long l = Math.min(B, C);
        long h = A * l;
        long lcm = getLCM(B, C);
        long mod = 1000000007;
        long ans = 0;
        while (l <= h) {
            long m = (l + h) / 2;
            if ((m / B) + (m / C) - (m / lcm) == A) {
                ans = m;
                h = m - 1;
            }
            else if ((m / B) + (m / C) - (m / lcm) > A) {
                h = m - 1;
            }
            else {
                l = m + 1;
            }
        }
        ans %= mod;
        return (int)ans;
    }
     public int getLCM(int a, int b) {
        int x = a;
        int y = b;
        while (y != 0) {
            int temp = y;
            y = x % y;
            x = temp;
        }
        int gcd = x;
        int lcm = (a * b) / gcd;
        return lcm;
    }
}


Q4. Square Root of Integer
public class Solution {
    public int sqrt(int A) {
        long l = 1;
        long h =A;
        long ans = 1;
        if(A==0){
            return 0;
        }
        while(l<=h){
            long m = (l+h);
            m = m/2;
            if(m*m == A){
                return (int)m;
            }
            if(m*m < A){
                ans = (int)m;
                l = m+1;
            }
            else{
                h = m-1;
            }
           
        }
        return (int)ans;
    }
}
