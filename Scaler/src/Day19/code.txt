Q1. Spiral Order Matrix II
class Solution {
    public List<List<int>> generateMatrix(int A) {
        if (A == 0)
        {
            return new List<List<int>>();
        }
        int number = 1;
        int i = 0;
        int j = 0;
        int row = A;
        int col = A;

        var list = new List<List<int>>();
        for (int k = 0; k < col; k++)
        {
            var _list = new int[col].ToList();
            list.Add(_list);
        }
        while (row > 0 && col > 0)
        {
            if (row == 1 && col == 1)
            {
                list[i][j] = number;
            }
            else
            {
                for (int k = 0; k < row - 1; k++)
                {
                    list[i][j] = number;
                    number++;
                    j++;
                }
                for (int k = 0; k < col - 1; k++)
                {
                    list[i][j] = number;
                    number++;
                    i++;
                }
                for (int k = 0; k < row - 1; k++)
                {
                    list[i][j] = number;
                    number++;
                    j--;
                }
                for (int k = 0; k < col - 1; k++)
                {
                    list[i][j] = number;
                    number++;
                    i--;
                }
            }
            row -= 2;
            col -= 2;
            i += 1;
            j += 1;
        }
        return list;
    }
}


Q2. Search in a row wise and column wise sorted matrix
class Solution {
    public int solve(List<List<int>> A, int B) {
        int N = A.Count;
        int i = 0;
        int j = A[0].Count - 1;
        int ans = -1;

        while (i < N && j > -1) {
            if (A[i][j] == B) {
                int _sum = (i + 1) * 1009 + (j + 1);
                if (ans == -1)
                {
                    ans = (i + 1) * 1009 + (j + 1);
                }
                else if (_sum < ans)
                {
                    ans = _sum;
                }
                j--;
            }
            else if (A[i][j] < B) {
                i++;
            } 
            else {
                j--;
            }
        }
        
        return ans;        
    }
}

Q3. Sum of all Submatrices
class Solution {
    public int solve(List<List<int>> A) {
        int row = A.Count;
        int col = A[0].Count;
        int _sum = 0;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                _sum += A[i][j] * (i + 1) * (j + 1) * (row - i) * (col - j);
            }
        }
        return _sum;
    }
}


Q1. Row with maximum number of ones
class Solution {
    public int solve(List<List<int>> A) {
        int ROW = A.Count;
        int COL = A[0].Count;
        int i = 0;
        int j = COL - 1;
        int ans = -1;
        while (i < ROW && j > -1) {
            while (j > -1 && A[i][j] == 1)
            {
                ans = i;
                j--;
            }
            i++;
        }
        return ans;
    }
}

Q2. Minimum Swaps
class Solution {
    public int solve(List<int> A, int B) {
        int n = A.Count;
        int size = 0;
        int k = B;
        for (int i = 0; i < n; i++) {
            if (A[i] <= k) {
                size++;
            }
        }
        int swaps = 0;
        int ans = int.MaxValue;
        for (int i = 0; i < size; i++) {
            if (A[i] > k) {
                swaps++;
            }
        }
        ans = Math.Min(ans, swaps);
        for (int i = size; i < n; i++) {
            if (A[i - size] <= k && A[i] > k) {
                swaps++;
            }
            else if (A[i - size] > k && A[i] <= k) {
                swaps--;
            }
            ans = Math.Min(ans, swaps);
        }
        return ans;
    }
}
